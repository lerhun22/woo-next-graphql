{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { stripIgnoredCharacters } from 'graphql';\nimport { useState } from 'react';\nimport { updateCartBIS } from \"../../../functions.js\";\n\nvar CartItem = function CartItem(_ref) {\n  _s();\n\n  var item = _ref.item,\n      products = _ref.products,\n      updateCartProcessing = _ref.updateCartProcessing,\n      handleRemoveProductClick = _ref.handleRemoveProductClick,\n      updateCartBIS = _ref.updateCartBIS;\n\n  var _useContext = useContext(AppContext),\n      _useContext2 = _slicedToArray(_useContext, 2),\n      cart = _useContext2[0],\n      setCart = _useContext2[1];\n\n  var _useState = useState(item.qty),\n      productCount = _useState[0],\n      setProductCount = _useState[1];\n  /*\n   * When user changes the qty from product input update the cart in localStorage\n   * Also update the cart in global context\n   *\n   * @param {Object} event event\n   *\n   * @return {void}\n   */\n\n\n  var handleQtyChange = function handleQtyChange(event) {\n    if (true) {\n      var newQty = event.target.value;\n      setProductCount(newQty);\n      console.warn('newQty:', newQty);\n      var existingCart = localStorage.getItem('woo-next-cart');\n      existingCart = JSON.parse(existingCart);\n      var updatedCart = updateCartBIS(existingCart, item, false, newQty);\n      setCart(updatedCart);\n    }\n  };\n\n  return __jsx(\"tr\", {\n    className: \"woo-next-cart-item\",\n    key: item.productId\n  }, __jsx(\"th\", {\n    className: \"woo-next-cart-element woo-next-cart-el-close\"\n  }, __jsx(\"span\", {\n    className: \"woo-next-cart-close-icon\",\n    onClick: function onClick(event) {\n      return handleRemoveProductClick(event, item.cartKey, products);\n    }\n  }, __jsx(\"i\", {\n    className: \"fa fa-times-circle\"\n  }))), __jsx(\"td\", {\n    className: \"woo-next-cart-element\"\n  }, __jsx(\"img\", {\n    width: \"64\",\n    src: item.image.sourceUrl,\n    srcSet: item.image.srcSet,\n    alt: item.image.title\n  })), __jsx(\"td\", {\n    className: \"woo-next-cart-element\"\n  }, item.name), __jsx(\"td\", {\n    className: \"woo-next-cart-element\"\n  }, 'string' !== typeof item.price ? item.price : item.price), __jsx(\"td\", {\n    className: \"woo-next-cart-element woo-next-cart-qty\"\n  }, __jsx(\"input\", {\n    type: \"number\",\n    min: \"1\",\n    className: \"woo-next-cart-qty-input\",\n    value: productCount,\n    onChange: function onChange(event) {\n      return handleQtyChange(event);\n    }\n  })), __jsx(\"td\", {\n    className: \"woo-next-cart-element\"\n  }, item.totalPrice));\n};\n\n_s(CartItem, \"Fj8ue7wGsMGXtVzI4cxi3QHWm7k=\");\n\n_c = CartItem;\nexport default CartItem;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartItem\");","map":{"version":3,"sources":["/Users/didierflury/Documents/Realiser/pweb/woo-next/components/cart/cart-page/CartItem.js"],"names":["stripIgnoredCharacters","useState","updateCartBIS","CartItem","item","products","updateCartProcessing","handleRemoveProductClick","useContext","AppContext","cart","setCart","qty","productCount","setProductCount","handleQtyChange","event","newQty","target","value","console","warn","existingCart","localStorage","getItem","JSON","parse","updatedCart","productId","cartKey","image","sourceUrl","srcSet","title","name","price","totalPrice"],"mappings":";;;;;;AAAA,SAASA,sBAAT,QAAuC,SAAvC;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,SAASC,aAAT,QAA8B,uBAA9B;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,OAMS;AAAA;;AAAA,MALNC,IAKM,QALNA,IAKM;AAAA,MAJNC,QAIM,QAJNA,QAIM;AAAA,MAHNC,oBAGM,QAHNA,oBAGM;AAAA,MAFNC,wBAEM,QAFNA,wBAEM;AAAA,MADNL,aACM,QADNA,aACM;;AAAA,oBACCM,UAAU,CAAEC,UAAF,CADX;AAAA;AAAA,MACjBC,IADiB;AAAA,MACXC,OADW;;AAAA,kBAEeV,QAAQ,CAAEG,IAAI,CAACQ,GAAP,CAFvB;AAAA,MAElBC,YAFkB;AAAA,MAEJC,eAFI;AAIzB;;;;;;;;;;AAQA,MAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD,EAAW;AAGlC,cAAuB;AAGtB,UAAMC,MAAM,GAAGD,KAAK,CAACE,MAAN,CAAaC,KAA5B;AAEAL,MAAAA,eAAe,CAACG,MAAD,CAAf;AAEAG,MAAAA,OAAO,CAACC,IAAR,CAAa,SAAb,EAAwBJ,MAAxB;AAEA,UAAIK,YAAY,GAAGC,YAAY,CAACC,OAAb,CAAqB,eAArB,CAAnB;AACAF,MAAAA,YAAY,GAAGG,IAAI,CAACC,KAAL,CAAWJ,YAAX,CAAf;AAEA,UAAMK,WAAW,GAAGzB,aAAa,CAACoB,YAAD,EAAelB,IAAf,EAAqB,KAArB,EAA4Ba,MAA5B,CAAjC;AAEAN,MAAAA,OAAO,CAACgB,WAAD,CAAP;AACA;AACD,GAnBD;;AAsBA,SACC;AAAI,IAAA,SAAS,EAAC,oBAAd;AAAmC,IAAA,GAAG,EAAGvB,IAAI,CAACwB;AAA9C,KACC;AAAI,IAAA,SAAS,EAAC;AAAd,KAEC;AAAM,IAAA,SAAS,EAAC,0BAAhB;AACM,IAAA,OAAO,EAAG,iBAAEZ,KAAF;AAAA,aAAaT,wBAAwB,CAAES,KAAF,EAASZ,IAAI,CAACyB,OAAd,EAAuBxB,QAAvB,CAArC;AAAA;AADhB,KAEC;AAAG,IAAA,SAAS,EAAC;AAAb,IAFD,CAFD,CADD,EAQC;AAAI,IAAA,SAAS,EAAC;AAAd,KACC;AAAK,IAAA,KAAK,EAAC,IAAX;AAAgB,IAAA,GAAG,EAAGD,IAAI,CAAC0B,KAAL,CAAWC,SAAjC;AAA6C,IAAA,MAAM,EAAG3B,IAAI,CAAC0B,KAAL,CAAWE,MAAjE;AAA0E,IAAA,GAAG,EAAG5B,IAAI,CAAC0B,KAAL,CAAWG;AAA3F,IADD,CARD,EAWC;AAAI,IAAA,SAAS,EAAC;AAAd,KAAwC7B,IAAI,CAAC8B,IAA7C,CAXD,EAYC;AAAI,IAAA,SAAS,EAAC;AAAd,KAA0C,aAAa,OAAO9B,IAAI,CAAC+B,KAA3B,GAAqC/B,IAAI,CAAC+B,KAA1C,GAAkD/B,IAAI,CAAC+B,KAA/F,CAZD,EAeC;AAAI,IAAA,SAAS,EAAC;AAAd,KAEC;AACC,IAAA,IAAI,EAAC,QADN;AAEC,IAAA,GAAG,EAAC,GAFL;AAGC,IAAA,SAAS,EAAC,yBAHX;AAIC,IAAA,KAAK,EAAGtB,YAJT;AAKC,IAAA,QAAQ,EAAG,kBAAEG,KAAF;AAAA,aAAaD,eAAe,CAAEC,KAAF,CAA5B;AAAA;AALZ,IAFD,CAfD,EAyBC;AAAI,IAAA,SAAS,EAAC;AAAd,KAAwCZ,IAAI,CAACgC,UAA7C,CAzBD,CADD;AA6BA,CArED;;GAAMjC,Q;;KAAAA,Q;AAuEN,eAAeA,QAAf","sourcesContent":["import { stripIgnoredCharacters } from 'graphql';\nimport { useState } from 'react';\nimport { updateCartBIS } from \"../../../functions.js\";\n\nconst CartItem = ( {\n\t                   item,\n\t                   products,\n\t                   updateCartProcessing,\n\t                   handleRemoveProductClick,\n\t                   updateCartBIS,\n                   } ) => {\n\tconst [ cart, setCart ] = useContext( AppContext );\n\tconst [productCount, setProductCount] = useState( item.qty );\n\n\t/*\n\t * When user changes the qty from product input update the cart in localStorage\n\t * Also update the cart in global context\n\t *\n\t * @param {Object} event event\n\t *\n\t * @return {void}\n\t */\n\tconst handleQtyChange = (event) => {\n\t\t\n\n\t\tif ( process.browser ) {\n\n\n\t\t\tconst newQty = event.target.value;\n\t\t\t\n\t\t\tsetProductCount(newQty);\n\n\t\t\tconsole.warn('newQty:', newQty);\n\t\t\t\n\t\t\tlet existingCart = localStorage.getItem('woo-next-cart');\n\t\t\texistingCart = JSON.parse(existingCart);\n\n\t\t\tconst updatedCart = updateCartBIS(existingCart, item, false, newQty);\n\n\t\t\tsetCart(updatedCart);\n\t\t}\n\t};\n\n\n\treturn (\n\t\t<tr className=\"woo-next-cart-item\" key={ item.productId }>\n\t\t\t<th className=\"woo-next-cart-element woo-next-cart-el-close\">\n\t\t\t\t{/* Remove item */}\n\t\t\t\t<span className=\"woo-next-cart-close-icon\"\n\t\t\t\t      onClick={ ( event ) => handleRemoveProductClick( event, item.cartKey, products ) }>\n\t\t\t\t\t<i className=\"fa fa-times-circle\"/>\n\t\t\t\t</span>\n\t\t\t</th>\n\t\t\t<td className=\"woo-next-cart-element\">\n\t\t\t\t<img width=\"64\" src={ item.image.sourceUrl } srcSet={ item.image.srcSet } alt={ item.image.title }/>\n\t\t\t</td>\n\t\t\t<td className=\"woo-next-cart-element\">{ item.name }</td>\n\t\t\t<td className=\"woo-next-cart-element\">{ ( 'string' !== typeof item.price ) ? item.price : item.price }</td>\n\n\t\t\t{/* Qty Input */ }\n\t\t\t<td className=\"woo-next-cart-element woo-next-cart-qty\">\n\t\t\t\t{/* @TODO Need to update this with graphQL query */ }\n\t\t\t\t<input\n\t\t\t\t\ttype=\"number\"\n\t\t\t\t\tmin=\"1\"\n\t\t\t\t\tclassName=\"woo-next-cart-qty-input\"\n\t\t\t\t\tvalue={ productCount }\n\t\t\t\t\tonChange={ ( event ) => handleQtyChange( event ) }\n\t\t\t\t/>\n\t\t\t</td>\n\t\t\t<td className=\"woo-next-cart-element\">{ item.totalPrice  }</td>\n\t\t</tr>\n\t)\n};\n\nexport default CartItem;\n"]},"metadata":{},"sourceType":"module"}