{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n\\t\\tquery {\\n\\t\\t\\t__typename\\n\\t\\t\\tproduct($id: String) {\\n\\t\\t\\t\\tid\\n\\t\\t\\t\\tname\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\n/** @format */\nimport Layout from \"../components/Layout\";\nimport Link from \"next/link\";\nimport { withRouter } from \"next/router\";\nimport client from \"../components/ApolloClient\";\nimport gql from \"graphql-tag\";\nvar Product = withRouter(_c = function _c(props) {\n  //console.warn(props);\n  return __jsx(\"div\", null, \"Product\");\n});\n_c2 = Product;\n\nProduct.getInitialProps = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(context) {\n    var slug, idslug, PRODUCT_QUERY, result;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            slug = context.query.slug;\n            idslug = slug ? slug.split(\"-\").pop() : context.query.id;\n            console.warn(idslug);\n            PRODUCT_QUERY = gql(_templateObject());\n            _context.next = 6;\n            return client.query({\n              query: PRODUCT_QUERY,\n              variables: {\n                idslug: idslug\n              }\n            });\n\n          case 6:\n            result = _context.sent;\n            return _context.abrupt(\"return\", {\n              product: result.data.productBy\n            });\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexport default Product;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Product$withRouter\");\n$RefreshReg$(_c2, \"Product\");","map":{"version":3,"sources":["/Users/didierflury/Documents/Realiser/pweb/woo-next/pages/product.js"],"names":["Layout","Link","withRouter","client","gql","Product","props","getInitialProps","context","slug","query","idslug","split","pop","id","console","warn","PRODUCT_QUERY","variables","result","product","data","productBy"],"mappings":";;;;;;;;;;;;;;;;AAAA;AAEA,OAAOA,MAAP,MAAmB,sBAAnB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,SAASC,UAAT,QAA2B,aAA3B;AACA,OAAOC,MAAP,MAAmB,4BAAnB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AAEA,IAAMC,OAAO,GAAGH,UAAU,MAAC,YAACI,KAAD,EAAW;AACrC;AACA,SAAO,6BAAP;AACA,CAHyB,CAA1B;MAAMD,O;;AAKNA,OAAO,CAACE,eAAR;AAAA,sEAA0B,iBAAgBC,OAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAEfC,YAAAA,IAFe,GAGrBD,OAHqB,CAExBE,KAFwB,CAEfD,IAFe;AAKnBE,YAAAA,MALmB,GAKVF,IAAI,GAAGA,IAAI,CAACG,KAAL,CAAW,GAAX,EAAgBC,GAAhB,EAAH,GAA2BL,OAAO,CAACE,KAAR,CAAcI,EALnC;AAOzBC,YAAAA,OAAO,CAACC,IAAR,CAAaL,MAAb;AAEMM,YAAAA,aATmB,GASHb,GATG;AAAA;AAAA,mBAmBJD,MAAM,CAACO,KAAP,CAAa;AACjCA,cAAAA,KAAK,EAAEO,aAD0B;AAEjCC,cAAAA,SAAS,EAAE;AAAEP,gBAAAA,MAAM,EAANA;AAAF;AAFsB,aAAb,CAnBI;;AAAA;AAmBnBQ,YAAAA,MAnBmB;AAAA,6CAwBlB;AACNC,cAAAA,OAAO,EAAED,MAAM,CAACE,IAAP,CAAYC;AADf,aAxBkB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA1B;;AAAA;AAAA;AAAA;AAAA;;AA6BA,eAAejB,OAAf","sourcesContent":["/** @format */\n\nimport Layout from \"../components/Layout\";\nimport Link from \"next/link\";\nimport { withRouter } from \"next/router\";\nimport client from \"../components/ApolloClient\";\nimport gql from \"graphql-tag\";\n\nconst Product = withRouter((props) => {\n\t//console.warn(props);\n\treturn <div>Product</div>;\n});\n\nProduct.getInitialProps = async function (context) {\n\tlet {\n\t\tquery: { slug },\n\t} = context;\n\n\tconst idslug = slug ? slug.split(\"-\").pop() : context.query.id;\n\n\tconsole.warn(idslug);\n\n\tconst PRODUCT_QUERY = gql`\n\t\tquery {\n\t\t\t__typename\n\t\t\tproduct($id: String) {\n\t\t\t\tid\n\t\t\t\tname\n\t\t\t}\n\t\t}\n\t`;\n\n\tconst result = await client.query({\n\t\tquery: PRODUCT_QUERY,\n\t\tvariables: { idslug },\n\t});\n\n\treturn {\n\t\tproduct: result.data.productBy,\n\t};\n};\n\nexport default Product;\n"]},"metadata":{},"sourceType":"module"}