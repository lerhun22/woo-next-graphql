{"ast":null,"code":"import fetch from 'node-fetch';\nimport { ApolloClient } from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { createHttpLink } from 'apollo-link-http';\nimport { ApolloLink } from \"apollo-link\";\nimport { IntrospectionFragmentMatcher } from 'apollo-cache-inmemory';\nimport introspectionQueryResultData from '../fragmentTypes';\nimport clientConfig from './../client-config'; // Fragment matcher.\n\nvar fragmentMatcher = new IntrospectionFragmentMatcher({\n  introspectionQueryResultData: introspectionQueryResultData\n});\n/**\n * Middleware operation\n * If we have a session token in localStorage, add it to the GraphQL request as a Session header.\n */\n\nexport var middleware = new ApolloLink(function (operation, forward) {\n  /**\n   * If session data exist in local storage, set value as session header.\n   */\n  var session = true ? localStorage.getItem(\"woo-session\") : null;\n\n  if (session) {\n    operation.setContext(function (_ref) {\n      var _ref$headers = _ref.headers,\n          headers = _ref$headers === void 0 ? {} : _ref$headers;\n      return {\n        headers: {\n          \"woocommerce-session\": \"Session \".concat(session)\n        }\n      };\n    });\n  }\n\n  return forward(operation);\n});\n/**\n * Afterware operation.\n *\n * This catches the incoming session token and stores it in localStorage, for future GraphQL requests.\n */\n\nexport var afterware = new ApolloLink(function (operation, forward) {\n  return forward(operation).map(function (response) {\n    /**\n     * Check for session header and update session in local storage accordingly.\n     */\n    var context = operation.getContext();\n    var headers = context.response.headers;\n    var session = headers.get(\"woocommerce-session\");\n\n    if (session) {\n      // Remove session data if session destroyed.\n      if (\"false\" === session) {\n        localStorage.removeItem(\"woo-session\"); // Update session new data if changed.\n      } else if (localStorage.getItem(\"woo-session\") !== session) {\n        localStorage.setItem(\"woo-session\", headers.get(\"woocommerce-session\"));\n      }\n    }\n\n    return response;\n  });\n}); // Apollo GraphQL client.\n\nvar client = new ApolloClient({\n  link: middleware.concat(afterware.concat(createHttpLink({\n    uri: clientConfig.graphqlUrl,\n    fetch: fetch\n  }))),\n  cache: new InMemoryCache({\n    fragmentMatcher: fragmentMatcher\n  })\n});\nexport default client;","map":{"version":3,"sources":["/Users/didierflury/Documents/Realiser/pweb/woo-next/github-repo-woo-next-master/components/ApolloClient.js"],"names":["fetch","ApolloClient","InMemoryCache","createHttpLink","ApolloLink","IntrospectionFragmentMatcher","introspectionQueryResultData","clientConfig","fragmentMatcher","middleware","operation","forward","session","localStorage","getItem","setContext","headers","afterware","map","response","context","getContext","get","removeItem","setItem","client","link","concat","uri","graphqlUrl","cache"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,YAAlB;AACA,SAASC,YAAT,QAA6B,eAA7B;AACA,SAASC,aAAT,QAA8B,uBAA9B;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA,SAASC,UAAT,QAA2B,aAA3B;AAEA,SAASC,4BAAT,QAA6C,uBAA7C;AACA,OAAOC,4BAAP,MAAyC,kBAAzC;AAEA,OAAOC,YAAP,MAAyB,oBAAzB,C,CAEA;;AACA,IAAMC,eAAe,GAAG,IAAIH,4BAAJ,CAAiC;AACxDC,EAAAA,4BAA4B,EAA5BA;AADwD,CAAjC,CAAxB;AAIA;;;;;AAIA,OAAO,IAAMG,UAAU,GAAG,IAAIL,UAAJ,CAAgB,UAAEM,SAAF,EAAaC,OAAb,EAA0B;AACnE;;;AAGA,MAAMC,OAAO,GAAG,OAAuBC,YAAY,CAACC,OAAb,CAAsB,aAAtB,CAAvB,GAA+D,IAA/E;;AAEA,MAAKF,OAAL,EAAe;AACdF,IAAAA,SAAS,CAACK,UAAV,CAAsB;AAAA,8BAAIC,OAAJ;AAAA,UAAIA,OAAJ,6BAAc,EAAd;AAAA,aAA0B;AAC/CA,QAAAA,OAAO,EAAE;AACR,mDAAmCJ,OAAnC;AADQ;AADsC,OAA1B;AAAA,KAAtB;AAKA;;AAED,SAAOD,OAAO,CAAED,SAAF,CAAd;AAEA,CAhByB,CAAnB;AAkBP;;;;;;AAKA,OAAO,IAAMO,SAAS,GAAG,IAAIb,UAAJ,CAAgB,UAAEM,SAAF,EAAaC,OAAb,EAA0B;AAElE,SAAOA,OAAO,CAAED,SAAF,CAAP,CAAqBQ,GAArB,CAA0B,UAAAC,QAAQ,EAAI;AAC5C;;;AAGA,QAAMC,OAAO,GAAGV,SAAS,CAACW,UAAV,EAAhB;AAJ4C,QAKxBL,OALwB,GAKTI,OALS,CAKpCD,QALoC,CAKxBH,OALwB;AAM5C,QAAMJ,OAAO,GAAGI,OAAO,CAACM,GAAR,CAAa,qBAAb,CAAhB;;AAEA,QAAKV,OAAL,EAAe;AAEd;AACA,UAAK,YAAYA,OAAjB,EAA2B;AAE1BC,QAAAA,YAAY,CAACU,UAAb,CAAyB,aAAzB,EAF0B,CAI1B;AACA,OALD,MAKO,IAAKV,YAAY,CAACC,OAAb,CAAsB,aAAtB,MAA0CF,OAA/C,EAAyD;AAE/DC,QAAAA,YAAY,CAACW,OAAb,CAAsB,aAAtB,EAAqCR,OAAO,CAACM,GAAR,CAAa,qBAAb,CAArC;AAEA;AACD;;AAED,WAAOH,QAAP;AAEA,GAzBM,CAAP;AA0BA,CA5BwB,CAAlB,C,CA8BP;;AACA,IAAMM,MAAM,GAAG,IAAIxB,YAAJ,CAAiB;AAC/ByB,EAAAA,IAAI,EAAEjB,UAAU,CAACkB,MAAX,CAAmBV,SAAS,CAACU,MAAV,CAAkBxB,cAAc,CAAC;AACzDyB,IAAAA,GAAG,EAAErB,YAAY,CAACsB,UADuC;AAEzD7B,IAAAA,KAAK,EAAEA;AAFkD,GAAD,CAAhC,CAAnB,CADyB;AAK/B8B,EAAAA,KAAK,EAAE,IAAI5B,aAAJ,CAAmB;AAAEM,IAAAA,eAAe,EAAfA;AAAF,GAAnB;AALwB,CAAjB,CAAf;AAQA,eAAeiB,MAAf","sourcesContent":["import fetch from 'node-fetch';\nimport { ApolloClient } from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { createHttpLink } from 'apollo-link-http';\nimport { ApolloLink } from \"apollo-link\";\n\nimport { IntrospectionFragmentMatcher } from 'apollo-cache-inmemory';\nimport introspectionQueryResultData from '../fragmentTypes';\n\nimport clientConfig from './../client-config';\n\n// Fragment matcher.\nconst fragmentMatcher = new IntrospectionFragmentMatcher({\n\tintrospectionQueryResultData\n});\n\n/**\n * Middleware operation\n * If we have a session token in localStorage, add it to the GraphQL request as a Session header.\n */\nexport const middleware = new ApolloLink( ( operation, forward ) => {\n\t/**\n\t * If session data exist in local storage, set value as session header.\n\t */\n\tconst session = ( process.browser ) ?  localStorage.getItem( \"woo-session\" ) : null;\n\n\tif ( session ) {\n\t\toperation.setContext( ( { headers = {} } ) => ( {\n\t\t\theaders: {\n\t\t\t\t\"woocommerce-session\": `Session ${ session }`\n\t\t\t}\n\t\t} ) );\n\t}\n\n\treturn forward( operation );\n\n} );\n\n/**\n * Afterware operation.\n *\n * This catches the incoming session token and stores it in localStorage, for future GraphQL requests.\n */\nexport const afterware = new ApolloLink( ( operation, forward ) => {\n\n\treturn forward( operation ).map( response => {\n\t\t/**\n\t\t * Check for session header and update session in local storage accordingly.\n\t\t */\n\t\tconst context = operation.getContext();\n\t\tconst { response: { headers } }  = context;\n\t\tconst session = headers.get( \"woocommerce-session\" );\n\n\t\tif ( session ) {\n\n\t\t\t// Remove session data if session destroyed.\n\t\t\tif ( \"false\" === session ) {\n\n\t\t\t\tlocalStorage.removeItem( \"woo-session\" );\n\n\t\t\t\t// Update session new data if changed.\n\t\t\t} else if ( localStorage.getItem( \"woo-session\" ) !== session ) {\n\n\t\t\t\tlocalStorage.setItem( \"woo-session\", headers.get( \"woocommerce-session\" ) );\n\n\t\t\t}\n\t\t}\n\n\t\treturn response;\n\n\t} );\n} );\n\n// Apollo GraphQL client.\nconst client = new ApolloClient({\n\tlink: middleware.concat( afterware.concat( createHttpLink({\n\t\turi: clientConfig.graphqlUrl,\n\t\tfetch: fetch\n\t}) ) ),\n\tcache: new InMemoryCache( { fragmentMatcher } ),\n});\n\nexport default client;\n"]},"metadata":{},"sourceType":"module"}