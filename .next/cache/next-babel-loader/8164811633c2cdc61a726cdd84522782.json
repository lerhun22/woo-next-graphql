{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { stripIgnoredCharacters } from 'graphql';\nimport { useState } from 'react';\nimport { addFirstProduct, updateCart, removeItemFromCart } from \"../../../functions\";\n\nconst CartItem = ({\n  item,\n  setCart,\n  products\n}) => {\n  const {\n    0: productCount,\n    1: setProductCount\n  } = useState(item.qty);\n\n  const handleRemoveProductClick = (event, productId) => {\n    const updatedCart = removeItemFromCart(productId);\n    setCart(updatedCart);\n  };\n  /*\n   * When user changes the qty from product input update the cart in localStorage\n   * Also update the cart in global context\n   *\n   * @param {Object} event event\n   *\n   * @return {void}\n   */\n\n\n  const handleQtyChange = event => {\n    if (false) {\n      const newQty = event.target.value;\n      setProductCount(newQty);\n      console.warn('newQty:', newQty);\n      let existingCart = localStorage.getItem('woo-next-cart');\n      existingCart = JSON.parse(existingCart);\n      const updatedCart = updateCart(existingCart, item, false, newQty);\n      setCart(updatedCart);\n    }\n  };\n\n  return __jsx(\"tr\", {\n    className: \"woo-next-cart-item\",\n    key: item.productId\n  }, __jsx(\"th\", {\n    className: \"woo-next-cart-element woo-next-cart-el-close\"\n  }, __jsx(\"span\", {\n    className: \"woo-next-cart-close-icon\",\n    onClick: event => handleRemoveProductClick(event, item.productID, products)\n  }, __jsx(\"i\", {\n    className: \"fa fa-times-circle\"\n  }))), __jsx(\"td\", {\n    className: \"woo-next-cart-element\"\n  }, __jsx(\"img\", {\n    width: \"64\",\n    src: item.image.sourceUrl,\n    srcSet: item.image.srcSet,\n    alt: item.image.title\n  })), __jsx(\"td\", {\n    className: \"woo-next-cart-element\"\n  }, item.name), __jsx(\"td\", {\n    className: \"woo-next-cart-element\"\n  }, 'string' !== typeof item.price ? item.price : item.price), __jsx(\"td\", {\n    className: \"woo-next-cart-element woo-next-cart-qty\"\n  }, __jsx(\"input\", {\n    type: \"number\",\n    min: \"1\",\n    className: \"woo-next-cart-qty-input\",\n    value: productCount,\n    onChange: event => handleQtyChange(event)\n  })), __jsx(\"td\", {\n    className: \"woo-next-cart-element\"\n  }, item.totalPrice));\n};\n\nexport default CartItem;","map":{"version":3,"sources":["/Users/didierflury/Documents/Realiser/pweb/woo-next/components/cart/cart-page/CartItem.js"],"names":["stripIgnoredCharacters","useState","addFirstProduct","updateCart","removeItemFromCart","CartItem","item","setCart","products","productCount","setProductCount","qty","handleRemoveProductClick","event","productId","updatedCart","handleQtyChange","newQty","target","value","console","warn","existingCart","localStorage","getItem","JSON","parse","productID","image","sourceUrl","srcSet","title","name","price","totalPrice"],"mappings":";;AAAA,SAASA,sBAAT,QAAuC,SAAvC;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,SAASC,eAAT,EAA0BC,UAA1B,EAAsCC,kBAAtC,QAAgE,oBAAhE;;AAEA,MAAMC,QAAQ,GAAG,CAAE;AAClBC,EAAAA,IADkB;AAElBC,EAAAA,OAFkB;AAGlBC,EAAAA;AAHkB,CAAF,KAIX;AAEL,QAAM;AAAA,OAACC,YAAD;AAAA,OAAeC;AAAf,MAAkCT,QAAQ,CAAEK,IAAI,CAACK,GAAP,CAAhD;;AAEA,QAAMC,wBAAwB,GAAG,CAACC,KAAD,EAAQC,SAAR,KAAsB;AACtD,UAAMC,WAAW,GAAGX,kBAAkB,CAACU,SAAD,CAAtC;AACAP,IAAAA,OAAO,CAACQ,WAAD,CAAP;AACA,GAHD;AAMA;;;;;;;;;;AAQA,QAAMC,eAAe,GAAIH,KAAD,IAAW;AAElC,eAAuB;AACtB,YAAMI,MAAM,GAAGJ,KAAK,CAACK,MAAN,CAAaC,KAA5B;AACAT,MAAAA,eAAe,CAACO,MAAD,CAAf;AACAG,MAAAA,OAAO,CAACC,IAAR,CAAa,SAAb,EAAwBJ,MAAxB;AACA,UAAIK,YAAY,GAAGC,YAAY,CAACC,OAAb,CAAqB,eAArB,CAAnB;AACAF,MAAAA,YAAY,GAAGG,IAAI,CAACC,KAAL,CAAWJ,YAAX,CAAf;AACA,YAAMP,WAAW,GAAGZ,UAAU,CAACmB,YAAD,EAAehB,IAAf,EAAqB,KAArB,EAA4BW,MAA5B,CAA9B;AACAV,MAAAA,OAAO,CAACQ,WAAD,CAAP;AACA;AACD,GAXD;;AAcA,SACC;AAAI,IAAA,SAAS,EAAC,oBAAd;AAAmC,IAAA,GAAG,EAAET,IAAI,CAACQ;AAA7C,KAEC;AAAI,IAAA,SAAS,EAAC;AAAd,KAEC;AAAM,IAAA,SAAS,EAAC,0BAAhB;AACC,IAAA,OAAO,EAAID,KAAD,IAAWD,wBAAwB,CAACC,KAAD,EAAQP,IAAI,CAACqB,SAAb,EAAwBnB,QAAxB;AAD9C,KAEC;AAAG,IAAA,SAAS,EAAC;AAAb,IAFD,CAFD,CAFD,EAUC;AAAI,IAAA,SAAS,EAAC;AAAd,KACC;AAAK,IAAA,KAAK,EAAC,IAAX;AAAgB,IAAA,GAAG,EAAGF,IAAI,CAACsB,KAAL,CAAWC,SAAjC;AAA6C,IAAA,MAAM,EAAGvB,IAAI,CAACsB,KAAL,CAAWE,MAAjE;AAA0E,IAAA,GAAG,EAAGxB,IAAI,CAACsB,KAAL,CAAWG;AAA3F,IADD,CAVD,EAaC;AAAI,IAAA,SAAS,EAAC;AAAd,KAAwCzB,IAAI,CAAC0B,IAA7C,CAbD,EAcC;AAAI,IAAA,SAAS,EAAC;AAAd,KAA0C,aAAa,OAAO1B,IAAI,CAAC2B,KAA3B,GAAqC3B,IAAI,CAAC2B,KAA1C,GAAkD3B,IAAI,CAAC2B,KAA/F,CAdD,EAiBC;AAAI,IAAA,SAAS,EAAC;AAAd,KAEC;AACC,IAAA,IAAI,EAAC,QADN;AAEC,IAAA,GAAG,EAAC,GAFL;AAGC,IAAA,SAAS,EAAC,yBAHX;AAIC,IAAA,KAAK,EAAGxB,YAJT;AAKC,IAAA,QAAQ,EAAKI,KAAF,IAAaG,eAAe,CAAEH,KAAF;AALxC,IAFD,CAjBD,EA2BC;AAAI,IAAA,SAAS,EAAC;AAAd,KAAwCP,IAAI,CAAC4B,UAA7C,CA3BD,CADD;AA+BA,CAnED;;AAqEA,eAAe7B,QAAf","sourcesContent":["import { stripIgnoredCharacters } from 'graphql';\nimport { useState } from 'react';\nimport { addFirstProduct, updateCart, removeItemFromCart } from \"../../../functions\";\n\nconst CartItem = ( {\n\titem,\n\tsetCart,\n\tproducts,\n}) => {\n\t\n\tconst [productCount, setProductCount] = useState( item.qty );\n\n\tconst handleRemoveProductClick = (event, productId) => {\t\n\t\tconst updatedCart = removeItemFromCart(productId)\n\t\tsetCart(updatedCart);\n\t};\n\n\n\t/*\n\t * When user changes the qty from product input update the cart in localStorage\n\t * Also update the cart in global context\n\t *\n\t * @param {Object} event event\n\t *\n\t * @return {void}\n\t */\n\tconst handleQtyChange = (event) => {\n\n\t\tif ( process.browser ) {\n\t\t\tconst newQty = event.target.value;\t\t\t\n\t\t\tsetProductCount(newQty);\n\t\t\tconsole.warn('newQty:', newQty);\t\t\t\n\t\t\tlet existingCart = localStorage.getItem('woo-next-cart');\n\t\t\texistingCart = JSON.parse(existingCart);\n\t\t\tconst updatedCart = updateCart(existingCart, item, false, newQty);\n\t\t\tsetCart(updatedCart);\n\t\t}\n\t};\n\n\n\treturn (\n\t\t<tr className=\"woo-next-cart-item\" key={item.productId}>\n\t\t\t\n\t\t\t<th className=\"woo-next-cart-element woo-next-cart-el-close\">\n\t\t\t\t{/* Remove item */}\n\t\t\t\t<span className=\"woo-next-cart-close-icon\"\n\t\t\t\t\tonClick={ (event) => handleRemoveProductClick(event, item.productID, products)}>\n\t\t\t\t\t<i className=\"fa fa-times-circle\"/>\n\t\t\t\t</span>\n\t\t\t</th>\n\t\t\t\n\t\t\t<td className=\"woo-next-cart-element\">\n\t\t\t\t<img width=\"64\" src={ item.image.sourceUrl } srcSet={ item.image.srcSet } alt={ item.image.title }/>\n\t\t\t</td>\n\t\t\t<td className=\"woo-next-cart-element\">{ item.name }</td>\n\t\t\t<td className=\"woo-next-cart-element\">{ ( 'string' !== typeof item.price ) ? item.price : item.price }</td>\n\n\t\t\t{/* Qty Input */ }\n\t\t\t<td className=\"woo-next-cart-element woo-next-cart-qty\">\n\t\t\t\t{/* @TODO Need to update this with graphQL query */ }\n\t\t\t\t<input\n\t\t\t\t\ttype=\"number\"\n\t\t\t\t\tmin=\"1\"\n\t\t\t\t\tclassName=\"woo-next-cart-qty-input\"\n\t\t\t\t\tvalue={ productCount }\n\t\t\t\t\tonChange={ ( event ) => handleQtyChange( event ) }\n\t\t\t\t/>\n\t\t\t</td>\n\t\t\t<td className=\"woo-next-cart-element\">{ item.totalPrice  }</td>\n\t\t</tr>\n\t)\n};\n\nexport default CartItem;\n"]},"metadata":{},"sourceType":"module"}