{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { stripIgnoredCharacters } from 'graphql';\nimport { useState } from 'react';\nimport { v4 } from \"uuid\";\nimport { updateCart, getUpdatedItems } from \"../../../functions\";\n\nconst CartItem = ({\n  item,\n  products,\n  updateCartProcessing,\n  handleRemoveProductClick,\n  updateCart\n}) => {\n  const {\n    0: productCount,\n    1: setProductCount\n  } = useState(item.qty);\n  /*\n   * When user changes the qty from product input update the cart in localStorage\n   * Also update the cart in global context\n   *\n   * @param {Object} event event\n   *\n   * @return {void}\n   */\n\n  const handleQtyChange = event => {\n    if (false) {\n      const newQty = event.target.value;\n      setProductCount(newQty);\n      console.warn('newQty:', newQty);\n      let existingCart = localStorage.getItem('woo-next-cart');\n      existingCart = JSON.parse(existing);\n      const upadtedCart = updateCart(existingCart, item, false, newQty);\n      stripIgnoredCharacters(updatedCart);\n    }\n  };\n\n  return __jsx(\"tr\", {\n    className: \"woo-next-cart-item\",\n    key: item.productId\n  }, __jsx(\"th\", {\n    className: \"woo-next-cart-element woo-next-cart-el-close\"\n  }, __jsx(\"span\", {\n    className: \"woo-next-cart-close-icon\",\n    onClick: event => handleRemoveProductClick(event, item.cartKey, products)\n  }, __jsx(\"i\", {\n    className: \"fa fa-times-circle\"\n  }))), __jsx(\"td\", {\n    className: \"woo-next-cart-element\"\n  }, __jsx(\"img\", {\n    width: \"64\",\n    src: item.image.sourceUrl,\n    srcSet: item.image.srcSet,\n    alt: item.image.title\n  })), __jsx(\"td\", {\n    className: \"woo-next-cart-element\"\n  }, item.name), __jsx(\"td\", {\n    className: \"woo-next-cart-element\"\n  }, 'string' !== typeof item.price ? item.price : item.price), __jsx(\"td\", {\n    className: \"woo-next-cart-element woo-next-cart-qty\"\n  }, __jsx(\"input\", {\n    type: \"number\",\n    min: \"1\",\n    \"data-cart-key\": item.cartKey,\n    className: `woo-next-cart-qty-input form-control ${updateCartProcessing ? 'woo-next-cart-disabled' : ''} `,\n    value: productCount,\n    onChange: event => handleQtyChange(event)\n  }), updateCartProcessing ? __jsx(\"img\", {\n    className: \"woo-next-cart-item-spinner\",\n    src: \"/cart-spinner.gif\",\n    alt: \"spinner\"\n  }) : ''), __jsx(\"td\", {\n    className: \"woo-next-cart-element\"\n  }, item.totalPrice));\n};\n\nexport default CartItem;","map":{"version":3,"sources":["/Users/didierflury/Documents/Realiser/pweb/woo-next/components/cart/cart-page/CartItem.js"],"names":["stripIgnoredCharacters","useState","v4","updateCart","getUpdatedItems","CartItem","item","products","updateCartProcessing","handleRemoveProductClick","productCount","setProductCount","qty","handleQtyChange","event","newQty","target","value","console","warn","existingCart","localStorage","getItem","JSON","parse","existing","upadtedCart","updatedCart","productId","cartKey","image","sourceUrl","srcSet","title","name","price","totalPrice"],"mappings":";;AAAA,SAASA,sBAAT,QAAuC,SAAvC;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,SAASC,EAAT,QAAmB,MAAnB;AACA,SAASC,UAAT,EAAqBC,eAArB,QAA4C,oBAA5C;;AAEA,MAAMC,QAAQ,GAAG,CAAE;AACCC,EAAAA,IADD;AAECC,EAAAA,QAFD;AAGCC,EAAAA,oBAHD;AAICC,EAAAA,wBAJD;AAKCN,EAAAA;AALD,CAAF,KAMS;AAEzB,QAAM;AAAA,OAACO,YAAD;AAAA,OAAeC;AAAf,MAAkCV,QAAQ,CAAEK,IAAI,CAACM,GAAP,CAAhD;AAEA;;;;;;;;;AAQA,QAAMC,eAAe,GAAKC,KAAF,IAAa;AAEpC,eAAuB;AAGtB,YAAMC,MAAM,GAAGD,KAAK,CAACE,MAAN,CAAaC,KAA5B;AAEAN,MAAAA,eAAe,CAACI,MAAD,CAAf;AAEAG,MAAAA,OAAO,CAACC,IAAR,CAAa,SAAb,EAAwBJ,MAAxB;AAEA,UAAIK,YAAY,GAAGC,YAAY,CAACC,OAAb,CAAqB,eAArB,CAAnB;AACAF,MAAAA,YAAY,GAAGG,IAAI,CAACC,KAAL,CAAWC,QAAX,CAAf;AAEA,YAAMC,WAAW,GAAGvB,UAAU,CAACiB,YAAD,EAAed,IAAf,EAAqB,KAArB,EAA4BS,MAA5B,CAA9B;AAEAf,MAAAA,sBAAsB,CAAC2B,WAAD,CAAtB;AAEA;AACD,GAnBD;;AAsBA,SACC;AAAI,IAAA,SAAS,EAAC,oBAAd;AAAmC,IAAA,GAAG,EAAGrB,IAAI,CAACsB;AAA9C,KACC;AAAI,IAAA,SAAS,EAAC;AAAd,KAEC;AAAM,IAAA,SAAS,EAAC,0BAAhB;AACM,IAAA,OAAO,EAAKd,KAAF,IAAaL,wBAAwB,CAAEK,KAAF,EAASR,IAAI,CAACuB,OAAd,EAAuBtB,QAAvB;AADrD,KAEC;AAAG,IAAA,SAAS,EAAC;AAAb,IAFD,CAFD,CADD,EAQC;AAAI,IAAA,SAAS,EAAC;AAAd,KACC;AAAK,IAAA,KAAK,EAAC,IAAX;AAAgB,IAAA,GAAG,EAAGD,IAAI,CAACwB,KAAL,CAAWC,SAAjC;AAA6C,IAAA,MAAM,EAAGzB,IAAI,CAACwB,KAAL,CAAWE,MAAjE;AAA0E,IAAA,GAAG,EAAG1B,IAAI,CAACwB,KAAL,CAAWG;AAA3F,IADD,CARD,EAWC;AAAI,IAAA,SAAS,EAAC;AAAd,KAAwC3B,IAAI,CAAC4B,IAA7C,CAXD,EAYC;AAAI,IAAA,SAAS,EAAC;AAAd,KAA0C,aAAa,OAAO5B,IAAI,CAAC6B,KAA3B,GAAqC7B,IAAI,CAAC6B,KAA1C,GAAkD7B,IAAI,CAAC6B,KAA/F,CAZD,EAeC;AAAI,IAAA,SAAS,EAAC;AAAd,KAEC;AACC,IAAA,IAAI,EAAC,QADN;AAEC,IAAA,GAAG,EAAC,GAFL;AAGC,qBAAgB7B,IAAI,CAACuB,OAHtB;AAIC,IAAA,SAAS,EAAI,wCAAwCrB,oBAAoB,GAAG,wBAAH,GAA8B,EAAI,GAJ5G;AAKC,IAAA,KAAK,EAAGE,YALT;AAMC,IAAA,QAAQ,EAAKI,KAAF,IAAaD,eAAe,CAAEC,KAAF;AANxC,IAFD,EAUGN,oBAAoB,GACrB;AAAK,IAAA,SAAS,EAAC,4BAAf;AAA4C,IAAA,GAAG,EAAC,mBAAhD;AAAoE,IAAA,GAAG,EAAC;AAAxE,IADqB,GACiE,EAXxF,CAfD,EA4BC;AAAI,IAAA,SAAS,EAAC;AAAd,KAAwCF,IAAI,CAAC8B,UAA7C,CA5BD,CADD;AAgCA,CAxED;;AA0EA,eAAe/B,QAAf","sourcesContent":["import { stripIgnoredCharacters } from 'graphql';\nimport { useState } from 'react';\nimport { v4 } from \"uuid\";\nimport { updateCart, getUpdatedItems } from \"../../../functions\";\n\nconst CartItem = ( {\n\t                   item,\n\t                   products,\n\t                   updateCartProcessing,\n\t                   handleRemoveProductClick,\n\t                   updateCart,\n                   } ) => {\n\n\tconst [productCount, setProductCount] = useState( item.qty );\n\n\t/*\n\t * When user changes the qty from product input update the cart in localStorage\n\t * Also update the cart in global context\n\t *\n\t * @param {Object} event event\n\t *\n\t * @return {void}\n\t */\n\tconst handleQtyChange = ( event ) => {\n\n\t\tif ( process.browser ) {\n\n\n\t\t\tconst newQty = event.target.value;\n\t\t\t\n\t\t\tsetProductCount(newQty);\n\n\t\t\tconsole.warn('newQty:', newQty);\n\t\t\t\n\t\t\tlet existingCart = localStorage.getItem('woo-next-cart');\n\t\t\texistingCart = JSON.parse(existing);\n\n\t\t\tconst upadtedCart = updateCart(existingCart, item, false, newQty);\n\n\t\t\tstripIgnoredCharacters(updatedCart);\n\n\t\t}\n\t};\n\n\n\treturn (\n\t\t<tr className=\"woo-next-cart-item\" key={ item.productId }>\n\t\t\t<th className=\"woo-next-cart-element woo-next-cart-el-close\">\n\t\t\t\t{/* Remove item */}\n\t\t\t\t<span className=\"woo-next-cart-close-icon\"\n\t\t\t\t      onClick={ ( event ) => handleRemoveProductClick( event, item.cartKey, products ) }>\n\t\t\t\t\t<i className=\"fa fa-times-circle\"/>\n\t\t\t\t</span>\n\t\t\t</th>\n\t\t\t<td className=\"woo-next-cart-element\">\n\t\t\t\t<img width=\"64\" src={ item.image.sourceUrl } srcSet={ item.image.srcSet } alt={ item.image.title }/>\n\t\t\t</td>\n\t\t\t<td className=\"woo-next-cart-element\">{ item.name }</td>\n\t\t\t<td className=\"woo-next-cart-element\">{ ( 'string' !== typeof item.price ) ? item.price : item.price }</td>\n\n\t\t\t{/* Qty Input */ }\n\t\t\t<td className=\"woo-next-cart-element woo-next-cart-qty\">\n\t\t\t\t{/* @TODO Need to update this with graphQL query */ }\n\t\t\t\t<input\n\t\t\t\t\ttype=\"number\"\n\t\t\t\t\tmin=\"1\"\n\t\t\t\t\tdata-cart-key={ item.cartKey }\n\t\t\t\t\tclassName={ `woo-next-cart-qty-input form-control ${ updateCartProcessing ? 'woo-next-cart-disabled' : '' } ` }\n\t\t\t\t\tvalue={ productCount }\n\t\t\t\t\tonChange={ ( event ) => handleQtyChange( event ) }\n\t\t\t\t/>\n\t\t\t\t{ updateCartProcessing ?\n\t\t\t\t\t<img className=\"woo-next-cart-item-spinner\" src=\"/cart-spinner.gif\" alt=\"spinner\"/> : '' }\n\t\t\t</td>\n\t\t\t<td className=\"woo-next-cart-element\">{ item.totalPrice  }</td>\n\t\t</tr>\n\t)\n};\n\nexport default CartItem;\n"]},"metadata":{},"sourceType":"module"}