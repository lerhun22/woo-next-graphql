{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\n/** @format */\nimport Layout from \"../components/Layout\";\nimport Link from \"next/link\";\nimport { withRouter } from \"next/router\";\nimport client from \"../components/ApolloClient\";\nimport gql from \"graphql-tag\";\nconst Product = withRouter(props => {\n  //console.warn(props);\n  const {\n    product\n  } = props;\n  return __jsx(Layout, null, product ? __jsx(\"div\", null, __jsx(\"div\", {\n    className: \"card bg-light mb3 p-5\"\n  }, __jsx(\"div\", {\n    className: \"card-header\"\n  }, product.name), __jsx(\"div\", {\n    className: \"card-body\"\n  }, __jsx(\"h4\", {\n    className: \"card-title\"\n  }, product.name), __jsx(\"img\", {\n    src: product.image.sourceUrl,\n    alt: \"Product Image\",\n    width: \"200px\",\n    srcSet: product.image.srcSet\n  }), __jsx(\"p\", {\n    className: \"card-text\"\n  }, product.shortDescription)))) : \"\");\n});\n\nProduct.getInitialProps = async function (context) {\n  let {\n    query: {\n      slug\n    }\n  } = context;\n  const id = slug ? slug.split(\"-\").pop() : context.query.id; //console.warn(id);\n\n  const PRODUCT_QUERY_OLD = gql`\n\t\tquery($id: ID!) {\n\t\t\tproduct(id: $id) {\n\t\t\t\tname\n\t\t\t\tid\n\t\t\t\tshortDescription\n\t\t\t\timage {\n\t\t\t\t\tcaption\n\t\t\t\t\tsrcSet\n\t\t\t\t\tsourceUrl\n\t\t\t\t\ttitle\n\t\t\t\t\turi\n\t\t\t\t}\n\t\t\t\t... on SimpleProduct {\n\t\t\t\t\tprice\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t`;\n  const PRODUCT_QUERY = gql`\n\t\tquery($id: ID!) {\n\t\t\tproduct(id: $id) {\n\t\t\t\tname\n\t\t\t\tid\n\t\t\t\tshortDescription\n\t\t\t\timage {\n\t\t\t\t\tcaption\n\t\t\t\t\tsrcSet\n\t\t\t\t\tsourceUrl\n\t\t\t\t\ttitle\n\t\t\t\t\turi\n\t\t\t\t}\n\t\t\t\t... on SimpleProduct {\n\t\t\t\t\tprice\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t`;\n  const result = await client.query({\n    query: PRODUCT_QUERY,\n    variables: {\n      id: \"cHJvZHVjdDoxMzQ=\"\n    }\n  });\n  return {\n    product: result.data.product\n  };\n};\n\nexport default Product;","map":{"version":3,"sources":["/Users/didierflury/Documents/Realiser/pweb/woo-next/pages/product.js"],"names":["Layout","Link","withRouter","client","gql","Product","props","product","name","image","sourceUrl","srcSet","shortDescription","getInitialProps","context","query","slug","id","split","pop","PRODUCT_QUERY_OLD","PRODUCT_QUERY","result","variables","data"],"mappings":";;;AAAA;AAEA,OAAOA,MAAP,MAAmB,sBAAnB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,SAASC,UAAT,QAA2B,aAA3B;AACA,OAAOC,MAAP,MAAmB,4BAAnB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AAEA,MAAMC,OAAO,GAAGH,UAAU,CAAEI,KAAD,IAAW;AACrC;AAEA,QAAM;AAAEC,IAAAA;AAAF,MAAcD,KAApB;AAEA,SACC,MAAC,MAAD,QACEC,OAAO,GACP,mBACC;AAAK,IAAA,SAAS,EAAC;AAAf,KACC;AAAK,IAAA,SAAS,EAAC;AAAf,KAA8BA,OAAO,CAACC,IAAtC,CADD,EAEC;AAAK,IAAA,SAAS,EAAC;AAAf,KACC;AAAI,IAAA,SAAS,EAAC;AAAd,KAA4BD,OAAO,CAACC,IAApC,CADD,EAEC;AACC,IAAA,GAAG,EAAED,OAAO,CAACE,KAAR,CAAcC,SADpB;AAEC,IAAA,GAAG,EAAC,eAFL;AAGC,IAAA,KAAK,EAAC,OAHP;AAIC,IAAA,MAAM,EAAEH,OAAO,CAACE,KAAR,CAAcE;AAJvB,IAFD,EAQC;AAAG,IAAA,SAAS,EAAC;AAAb,KAA0BJ,OAAO,CAACK,gBAAlC,CARD,CAFD,CADD,CADO,GAiBP,EAlBF,CADD;AAuBA,CA5ByB,CAA1B;;AA8BAP,OAAO,CAACQ,eAAR,GAA0B,gBAAgBC,OAAhB,EAAyB;AAClD,MAAI;AACHC,IAAAA,KAAK,EAAE;AAAEC,MAAAA;AAAF;AADJ,MAEAF,OAFJ;AAIA,QAAMG,EAAE,GAAGD,IAAI,GAAGA,IAAI,CAACE,KAAL,CAAW,GAAX,EAAgBC,GAAhB,EAAH,GAA2BL,OAAO,CAACC,KAAR,CAAcE,EAAxD,CALkD,CAOlD;;AAEA,QAAMG,iBAAiB,GAAGhB,GAAI;;;;;;;;;;;;;;;;;;EAA9B;AAoBA,QAAMiB,aAAa,GAAGjB,GAAI;;;;;;;;;;;;;;;;;;EAA1B;AAoBA,QAAMkB,MAAM,GAAG,MAAMnB,MAAM,CAACY,KAAP,CAAa;AACjCA,IAAAA,KAAK,EAAEM,aAD0B;AAEjCE,IAAAA,SAAS,EAAE;AAAEN,MAAAA,EAAE,EAAE;AAAN;AAFsB,GAAb,CAArB;AAKA,SAAO;AACNV,IAAAA,OAAO,EAAEe,MAAM,CAACE,IAAP,CAAYjB;AADf,GAAP;AAGA,CAzDD;;AA2DA,eAAeF,OAAf","sourcesContent":["/** @format */\n\nimport Layout from \"../components/Layout\";\nimport Link from \"next/link\";\nimport { withRouter } from \"next/router\";\nimport client from \"../components/ApolloClient\";\nimport gql from \"graphql-tag\";\n\nconst Product = withRouter((props) => {\n\t//console.warn(props);\n\n\tconst { product } = props;\n\n\treturn (\n\t\t<Layout>\n\t\t\t{product ? (\n\t\t\t\t<div>\n\t\t\t\t\t<div className='card bg-light mb3 p-5'>\n\t\t\t\t\t\t<div className='card-header'>{product.name}</div>\n\t\t\t\t\t\t<div className='card-body'>\n\t\t\t\t\t\t\t<h4 className='card-title'>{product.name}</h4>\n\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\tsrc={product.image.sourceUrl}\n\t\t\t\t\t\t\t\talt='Product Image'\n\t\t\t\t\t\t\t\twidth='200px'\n\t\t\t\t\t\t\t\tsrcSet={product.image.srcSet}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<p className='card-text'>{product.shortDescription}</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t) : (\n\t\t\t\t\"\"\n\t\t\t)}\n\t\t</Layout>\n\t);\n});\n\nProduct.getInitialProps = async function (context) {\n\tlet {\n\t\tquery: { slug },\n\t} = context;\n\n\tconst id = slug ? slug.split(\"-\").pop() : context.query.id;\n\n\t//console.warn(id);\n\n\tconst PRODUCT_QUERY_OLD = gql`\n\t\tquery($id: ID!) {\n\t\t\tproduct(id: $id) {\n\t\t\t\tname\n\t\t\t\tid\n\t\t\t\tshortDescription\n\t\t\t\timage {\n\t\t\t\t\tcaption\n\t\t\t\t\tsrcSet\n\t\t\t\t\tsourceUrl\n\t\t\t\t\ttitle\n\t\t\t\t\turi\n\t\t\t\t}\n\t\t\t\t... on SimpleProduct {\n\t\t\t\t\tprice\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t`;\n\n\tconst PRODUCT_QUERY = gql`\n\t\tquery($id: ID!) {\n\t\t\tproduct(id: $id) {\n\t\t\t\tname\n\t\t\t\tid\n\t\t\t\tshortDescription\n\t\t\t\timage {\n\t\t\t\t\tcaption\n\t\t\t\t\tsrcSet\n\t\t\t\t\tsourceUrl\n\t\t\t\t\ttitle\n\t\t\t\t\turi\n\t\t\t\t}\n\t\t\t\t... on SimpleProduct {\n\t\t\t\t\tprice\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t`;\n\n\tconst result = await client.query({\n\t\tquery: PRODUCT_QUERY,\n\t\tvariables: { id: \"cHJvZHVjdDoxMzQ=\" },\n\t});\n\n\treturn {\n\t\tproduct: result.data.product,\n\t};\n};\n\nexport default Product;\n"]},"metadata":{},"sourceType":"module"}